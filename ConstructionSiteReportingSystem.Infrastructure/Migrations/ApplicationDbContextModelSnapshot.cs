// <auto-generated />
using System;
using ConstructionSiteReportingSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConstructionSiteReportingSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ConstructionSiteDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Contractor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Construction contractor identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Construction contractor name");

                    b.HasKey("Id");

                    b.ToTable("Contractors");

                    b.HasComment("Construction contractor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "GBS Build"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "M Constructions"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Quality Plumbing"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Pavement Systems"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "NewSteel LTD"
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Construction site identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2")
                        .HasComment("Construction site finish date");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Construction site image URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Construction site name");

                    b.HasKey("Id");

                    b.ToTable("Sites");

                    b.HasComment("Construction site");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FinishDate = new DateTime(2027, 3, 19, 15, 7, 50, 83, DateTimeKind.Local).AddTicks(1370),
                            ImageUrl = "https://images.pexels.com/photos/220885/pexels-photo-220885.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            IsDeleted = false,
                            Name = "Plant construction for production of electric bicycles MaxCompany"
                        },
                        new
                        {
                            Id = 2,
                            FinishDate = new DateTime(2029, 3, 19, 15, 7, 50, 83, DateTimeKind.Local).AddTicks(1393),
                            ImageUrl = "https://images.pexels.com/photos/2833686/pexels-photo-2833686.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            IsDeleted = false,
                            Name = "Construction of streets in Plovdiv Municipality"
                        },
                        new
                        {
                            Id = 3,
                            FinishDate = new DateTime(2026, 3, 19, 15, 7, 50, 83, DateTimeKind.Local).AddTicks(1396),
                            ImageUrl = "https://images.pexels.com/photos/236698/pexels-photo-236698.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            IsDeleted = false,
                            Name = "Plant construction for cardboard packaging GreenPac"
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.SiteStage", b =>
                {
                    b.Property<int>("SiteId")
                        .HasColumnType("int")
                        .HasComment("Construction site identifier");

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasComment("Construction stage identifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SiteId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("SitesStages");

                    b.HasComment("Construction site and construction stage mapping table");

                    b.HasData(
                        new
                        {
                            SiteId = 1,
                            StageId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 1,
                            StageId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 1,
                            StageId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 1,
                            StageId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 1,
                            StageId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 2,
                            StageId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 2,
                            StageId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 2,
                            StageId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 2,
                            StageId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 2,
                            StageId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 3,
                            StageId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 3,
                            StageId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 3,
                            StageId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 3,
                            StageId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            SiteId = 3,
                            StageId = 5,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Construction stage identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Construction stage name");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasComment("Construction stage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Sitework and foundation"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Rough framing"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Exterior construction"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Mechanical, electrical and plumbing"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Finishes and fixtures"
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Task identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Task creation date");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Task creator identifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Task description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Task's current status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Task title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Tasks");

                    b.HasComment("User tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 3, 19, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6548),
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Must order 5m3 concrete class C20/25 with delivery date next Monday",
                            IsDeleted = false,
                            Status = 0,
                            Title = "Order concrete"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 4, 18, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6550),
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Should start looking through documentation and drawings of upcoming project",
                            IsDeleted = false,
                            Status = 0,
                            Title = "New project documentation"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 3, 14, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6553),
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Go to weekly site Monday meeting",
                            IsDeleted = false,
                            Status = 2,
                            Title = "Weekly meeting"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2024, 3, 19, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6555),
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Fill in monthly workers attendance forms and send them to accounting by the end of month",
                            IsDeleted = false,
                            Status = 1,
                            Title = "Monthly workers attendance forms"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2024, 3, 19, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6557),
                            CreatorId = "a615552b-5981-4730-be32-12c087492aef",
                            Description = "Call engineer supervisor and schedule meeting to discuss construction work progress and difficulties",
                            IsDeleted = false,
                            Status = 0,
                            Title = "Schedule meeting"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2024, 3, 24, 15, 7, 50, 159, DateTimeKind.Local).AddTicks(6559),
                            CreatorId = "a615552b-5981-4730-be32-12c087492aef",
                            Description = "Call Doka representative and order more formwork for site",
                            IsDeleted = false,
                            Status = 0,
                            Title = "Formwork"
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Measurement unit identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Measurement unit type");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasComment("Measurement unit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Type = "ton"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Type = "kg"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Type = "cu.m"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Type = "sq.m"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Type = "m"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Type = "piece"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Type = "piece/m"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Type = "machine hours"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Type = "man hours"
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CarryOutDate")
                        .HasColumnType("datetime2")
                        .HasComment("Construction and assembly work carry out date and time");

                    b.Property<int>("ContractorId")
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work contractor identifier");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Construction and assembly work cost per measurement unit");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Construction and assembly work creator identifier");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Construction and assembly work description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasComment("Construction and assembly work quantity");

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work stage identifier");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(36,2)")
                        .HasComment("Construction and assembly work total cost");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work measurement unit identifier");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work type identifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("StageId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Works");

                    b.HasComment("Construction and assembly work");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarryOutDate = new DateTime(2024, 3, 19, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(550),
                            ContractorId = 3,
                            CostPerUnit = 23m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 897.0,
                            StageId = 4,
                            TotalCost = 20631m,
                            UnitId = 5,
                            WorkTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarryOutDate = new DateTime(2024, 3, 19, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(557),
                            ContractorId = 4,
                            CostPerUnit = 42.5m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 120.0,
                            StageId = 1,
                            TotalCost = 5100m,
                            UnitId = 3,
                            WorkTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            CarryOutDate = new DateTime(2024, 3, 20, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(560),
                            ContractorId = 4,
                            CostPerUnit = 35.5m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Entered cost for crushed aggredate material and delivery",
                            IsDeleted = false,
                            Quantity = 150.0,
                            StageId = 1,
                            TotalCost = 5325m,
                            UnitId = 3,
                            WorkTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CarryOutDate = new DateTime(2024, 3, 20, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(563),
                            ContractorId = 2,
                            CostPerUnit = 600m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Entered cost for crushed aggredate compaction using 11 ton roller",
                            IsDeleted = false,
                            Quantity = 1.0,
                            StageId = 1,
                            TotalCost = 600m,
                            UnitId = 8,
                            WorkTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            CarryOutDate = new DateTime(2024, 3, 21, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(565),
                            ContractorId = 4,
                            CostPerUnit = 42.5m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 250.0,
                            StageId = 1,
                            TotalCost = 10625m,
                            UnitId = 3,
                            WorkTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CarryOutDate = new DateTime(2024, 3, 29, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(569),
                            ContractorId = 4,
                            CostPerUnit = 8m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Used combined excavators",
                            IsDeleted = false,
                            Quantity = 150.0,
                            StageId = 1,
                            TotalCost = 1200m,
                            UnitId = 3,
                            WorkTypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            CarryOutDate = new DateTime(2024, 3, 31, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(571),
                            ContractorId = 4,
                            CostPerUnit = 164m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 163.0,
                            StageId = 1,
                            TotalCost = 26732m,
                            UnitId = 1,
                            WorkTypeId = 4
                        },
                        new
                        {
                            Id = 8,
                            CarryOutDate = new DateTime(2024, 4, 1, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(574),
                            ContractorId = 4,
                            CostPerUnit = 164m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 158.0,
                            StageId = 1,
                            TotalCost = 25912m,
                            UnitId = 1,
                            WorkTypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            CarryOutDate = new DateTime(2024, 4, 2, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(576),
                            ContractorId = 4,
                            CostPerUnit = 164m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 75.0,
                            StageId = 1,
                            TotalCost = 12300m,
                            UnitId = 1,
                            WorkTypeId = 4
                        },
                        new
                        {
                            Id = 10,
                            CarryOutDate = new DateTime(2024, 4, 3, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(579),
                            ContractorId = 4,
                            CostPerUnit = 152m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            IsDeleted = false,
                            Quantity = 210.0,
                            StageId = 1,
                            TotalCost = 31920m,
                            UnitId = 1,
                            WorkTypeId = 5
                        },
                        new
                        {
                            Id = 11,
                            CarryOutDate = new DateTime(2024, 3, 24, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(581),
                            ContractorId = 2,
                            CostPerUnit = 135m,
                            CreatorId = "a615552b-5981-4730-be32-12c087492aef",
                            IsDeleted = false,
                            Quantity = 20.0,
                            StageId = 1,
                            TotalCost = 2700m,
                            UnitId = 3,
                            WorkTypeId = 6
                        },
                        new
                        {
                            Id = 12,
                            CarryOutDate = new DateTime(2024, 3, 23, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(584),
                            ContractorId = 5,
                            CostPerUnit = 2.2m,
                            CreatorId = "a615552b-5981-4730-be32-12c087492aef",
                            Description = "Entered cost for reinforcement steel and delivery",
                            IsDeleted = false,
                            Quantity = 57.0,
                            StageId = 1,
                            TotalCost = 125.4m,
                            UnitId = 2,
                            WorkTypeId = 7
                        },
                        new
                        {
                            Id = 13,
                            CarryOutDate = new DateTime(2024, 3, 23, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(587),
                            ContractorId = 1,
                            CostPerUnit = 0.3m,
                            CreatorId = "a615552b-5981-4730-be32-12c087492aef",
                            Description = "Entered cost for reinforcement steel laying",
                            IsDeleted = false,
                            Quantity = 57.0,
                            StageId = 1,
                            TotalCost = 17.1m,
                            UnitId = 2,
                            WorkTypeId = 7
                        },
                        new
                        {
                            Id = 14,
                            CarryOutDate = new DateTime(2024, 4, 5, 15, 7, 50, 147, DateTimeKind.Local).AddTicks(590),
                            ContractorId = 1,
                            CostPerUnit = 8m,
                            CreatorId = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            Description = "Entered cost for formwork assembly",
                            IsDeleted = false,
                            Quantity = 57.0,
                            StageId = 2,
                            TotalCost = 456m,
                            UnitId = 4,
                            WorkTypeId = 8
                        });
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Construction and assembly work type identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Construction and assembly work type name");

                    b.HasKey("Id");

                    b.ToTable("WorksTypes");

                    b.HasComment("Construction and assembly work type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "PE400 SN8 pipe installation"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Delivery,laying and compaction of crushed aggregate for road base"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Earthwork excavation"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Delivery, laying and compaction of asphalt concrete binder course"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Delivery, laying and compaction of asphalt concrete surface course"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Delivery and pouring concrete for foundation slab"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Delivery and laying of reinforcement steel for foundation slab"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Large-area formwork for concrete slab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "32f9a0f0-4d62-4573-96e3-fbb7ad7f321f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bf7f41d-db18-4cd9-ae4e-df30088265ae",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "TEST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaBJe7vVRbwioFY/aVj3kSOkHFdypTu6izfNq63al5AQXwrvkgZna9QdH/6UhK3Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "408ca107-dbd0-4435-956e-4e97b2d1e76e",
                            TwoFactorEnabled = false,
                            UserName = "test@mail.com"
                        },
                        new
                        {
                            Id = "a615552b-5981-4730-be32-12c087492aef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af7a0db4-efcb-463a-b993-7b29fe87cb5e",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@MAIL.COM",
                            NormalizedUserName = "GUEST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGQK+mkxT7qWGrc4SWNoAfxHs2gummbaTsKUJqqwMkEhM3o1jY1f7HGSZbDbuO5rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "660a4215-3e6d-4ecd-94ec-c82d7d44bf31",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.SiteStage", b =>
                {
                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Site", "Site")
                        .WithMany("SitesStages")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Stage", "Stage")
                        .WithMany("SitesStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Task", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Work", b =>
                {
                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Contractor", "Contractor")
                        .WithMany("Works")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Stage", "Stage")
                        .WithMany("Works")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Unit", "Unit")
                        .WithMany("Works")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConstructionSiteReportingSystem.Infrastructure.Data.Models.WorkType", "WorkType")
                        .WithMany("Works")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contractor");

                    b.Navigation("Creator");

                    b.Navigation("Stage");

                    b.Navigation("Unit");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Contractor", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Site", b =>
                {
                    b.Navigation("SitesStages");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Stage", b =>
                {
                    b.Navigation("SitesStages");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.Unit", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionSiteReportingSystem.Infrastructure.Data.Models.WorkType", b =>
                {
                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
